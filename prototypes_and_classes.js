// const objC = {
//   z: 5,
// };

// console.log(objC);
//!Так створюємо прототипи:  Це просто копіювання, а не створення прототипу

// const objB = Object.create(objC);
const objB = { ...objC };
// objB.y = 2; //створили власну властивість для ObjB
// const objA = Object.create(objB); //Так створили ще один прототип
// objA.x = 1; //створили власну властивість для ObjA

// console.log("objC", objC);
// console.log("objB", objB);
// console.log(ObjB.y); //own property
// console.log(ObjB.z); //теж покаже, хоч і не own property, бо прототипне наслідування
// console.log("objA", objA);

//!Якщо властивості,яку ми шукаємо, нема ні в об'єкта, в якому ми шукаємо, ані в прототипів, то видасть UNDEFINED

//!АЛГОРИТМ ПОШУКУ В ЛАНЦЮЖКУ ПРОТОТИПІВ
//1. Шукаємо в власних властивостях
//2. Якщо в власних властивостях нема, то пошук переходить в ланцюжок прототипів
//3. Пошук зупиняється при першому співпадінні (є власна властивість);
//4. Повертається значення властивості(власної, або не власної, або якщо такої і в прототипах нема, то UNDEFINED)
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                  Classes
//Ще по-іншому називають ФУНКЦІЯ-КОНСТРУКТОР
//! ім'я функції завжди з великої букви і є зазвичай іменником
const Car = function ({ brand, model, price } = {}) {
  // config = {} - це для того, щоб, якщо в аргументи нічого не передадуть, то не було помилки
  // console.log(config);
  // const { brand, model, price } = config;
  this.brand = brand;
  this.model = model;
  this.price = price;

  this.changePrice = function (newPrice) {
    this.price = newPrice;
  };
};

//! ФУНКЦІЯ-КОНСТРУКТОР як ескіз для загального класу, а фізичний продукт цього ескізу - називаємо ЕКЗЕМПЛЯР
// Як створити екземпляр?

//Екземпляр 1

const myCar = new Car({
  brand: "Audi",
  model: "Q3",
  price: 35000,
});
console.log(myCar);

//Екземпляр 2

const myCar2 = new Car({
  brand: "BMW",
  model: "X6",
  price: 50000,
});
console.log(myCar2);

//Екземпляр 3

const myCar3 = new Car({
  brand: "Audi",
  model: "Q6",
  price: 65000,
});
console.log(myCar3);

//! ОПЕРАТОР NEW - це він відповідає за створення екземпляра
//!!Десь під капотом (в пам'яті) створюється ПУСТИЙ ОБ'ЄКТ
//ЦЯ ФУНКЦІЯ ВИКЛИКАЄТЬСЯ В КОНТЕКСТІ СТВОРЕНОГО НОВОГО ПУСТОГО ОБ'ЄКТУ
//THIS цієї нової функції вказує на цей новий пустий об'єкт
//Таким чином ми можемо додавати в цей пустий об'єкт нові властиості через this
